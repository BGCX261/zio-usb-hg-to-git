ZIO, Motherboard
================
Zilogic Systems
:Subtitle: User Manual
:Date:     Feb 2012
:Revision: 1.2

Introduction
------------

Philosophy
~~~~~~~~~~

 * Move development from micro-controllers to PC
 * Use high level languages like Python and Java.
 * Extend the IO capabilities of the PC.
 * Rapid prototype development.

.Block Diagram
image::zio-blocks.png["Block Diagram",width="432"]

Product Features
~~~~~~~~~~~~~~~~

 * Connects to PC through USB 
 * Interfaces - GPIO, PWM, ADC, DAC, SPI, I2C
 * Host-side API for programming the ports
 * APIs available for Java and Python 
 * API documentation for easy reference
 * Port interfacing guidelines for common scenarios
 * GUI based Control Panel to explore the board
 * On-field firmware upgrade through USB

Connecting to ZIO
-----------------

In this chapter we will describe the connector used for the ZIO ports
and the pins found on each of the ports. The ZIO has 5 FRC connectors.

  1. DIO
  2. AIO
  3. PWM
  4. UART-I2C
  5. SPI

`SPI` Pinmap
~~~~~~~~~~~~

The `SPI` header is terminated with serial peripheral interface (SPI)
bus, 4 general purpose IO and power supply. Add-on boards with SPI
interface and general purpose IOs like MMC/SD card,EEPROM etc., can be
connected through this header.

image::frc10.png["SPI",width=360]

.`SPI` Header
`-------`-------------`-----------------------
Pin #   Header Signal Signal Type
----------------------------------------------
   1    `VCC`         +5V
   2    `SCK`         TTL Out
   3    `MISO`        TTL In ^1^
   4    `MOSI`        TTL Out  
   5    `SS`          TTL Out
   6    `DIO0`        OC ^2^
   7    `DIO1`        OC ^2^
   8    `DIO2`        OC ^2^
   9    `DIO3`        OC ^2^
  10    `GND`         Ground
----------------------------------------------

^1^ 5V tolerant Input

^2^ Open collector, with 5V pull-up

`VCC` (Pin 1):: This is the +5V power supply for the external
devices. The supply has a total current limit of 200mA when powered
through USB.

`SCK` (Pin 2):: This is Serial Clock signal. 

`MISO` (Pin 3):: This is the Master Input, Slave Output signal. 

`MOSI` (Pin 4):: This is the Master Output, Slave Input signal. 

`SS` (Pin 5):: This is the SPI chip select signal.

`DIO` (Pin 6-9):: These are digital input/output signals.  These lines
can be used to interface any extra signals required for a SPI devices
like SD Card, etc., or can be used as chip selects for four other
devices. The signals are pulled up to 5V, through a 10K resistor.

`GND` (Pin 10):: This is the ground signal. All other signals are
referenced to the this signal.

`UART-I2C` Pinmap
~~~~~~~~~~~~~~~~~

The `UART-I2C` header is terminated with serial communication signals,
I2C signals and power supply. Add-on boards, with different
functionalities, can be connected through this header.

image::frc10.png["UART-I2C",width=360]

.`UART-I2C` Header
`-------`-------------`-------------
Pin #   Header Signal Signal Type
------------------------------------
   1    `VCC`         +5V
   2    `RXD`         TTL In ^1^
   3    `TXD`         TTL Out
   4    `SCL`         OC ^2^
   5    `SDA`         OC ^2^
   6    `DIO0`        OC ^2^
   7    `DIO1`        OC ^2^
   8    `DIO2`        OC ^2^
   9    `DIO3`        OC ^2^
  10    `GND`         Ground
------------------------------------

^1^ 5V tolerant input

^2^ Open collector, with 5V pull-up

`VCC` (Pin 1):: This is the +5V power supply for the external
devices. The supply has a total current limit of 200mA when powered
through USB.

`RXD` (Pin 2):: This is receive line of serial IO.

`TXD` (Pin 3):: This is transmit line of serial IO.

`SCL`, `SDA` (Pin 4, 5):: These are I2C bus signals(clock, data), and
can be used to connect I2C devices. The signals are pulled up to 5V,
through a 4.7K resistor.

`DIO` (Pin 6-9):: These are digital input/output signals. These pins
can be used for hand-shake and flow control signals like `DTR`, `RTS`,
`CTS`, etc. The signals are pulled up to 5V, through a 10K resistor.

`GND` (Pin 10):: This is the ground signal. All other signals are
referenced to this signal.

`DIO` Pinmap
~~~~~~~~~~~~

The `DIO` header is terminated with GPIO signals, along with power
supply. Add-on boards, with different functionalities, can be
connected through this header.

image::frc14.png["DIO",width=360]

.`DIO` Header
`-------`-------------`---------------
Pin #   Header Signal Signal Type
--------------------------------------
   1    `VCC`         +5V
   2    `DO0`         TTL Out
   3    `DO1`         TTL Out
   4    `DO2`         TTL Out
   5    `DO3`         TTL Out
   6    `DO4`         TTL Out
   7    `DO5`         TTL Out
   8    `DO6`         TTL Out
   9    `DO7`         TTL Out
   10   `DIO8`        OC ^2^
   11   `DIO9`        OC ^2^
   12   `DIO10`       OC ^2^
   13   `DIO11`       OC ^2^
   14   `GND`         Ground
--------------------------------------

^1^ 5V tolerant input

^2^ Open collector, with 5V pull-up

`VCC` (Pin 1):: This is the +5V power supply for the external
devices. The supply has a total current limit of 200mA when powered
through USB.

`DO` (Pin 2-9):: These are digital output signals. The signal is a 5V
logic signal, but the output can drive a 5V device or 3.3V device with
5V tolerance. 

`DIO` (Pin 10-13):: These are digital input/output signals.  The
signal is a 5V logic signal, but the output can drive a 5V device or
3.3V device with 5V tolerance. These signals can be used as control
and hand-shake signals. The signals are pulled up to 5V, through a 10K
resistor.

`GND` (Pin 14):: This is the ground signal. All other signals are
referenced to this signal.

`PWM` Pinmap
~~~~~~~~~~~~

The `PWM` header is terminated with 5 pulse width modulation signals
and power supply. Add-on boards like LED control, motor control can be
connected through this header.

image::frc10.png["PWM",width=360]

.`PWM` Header
`-------`------------
Pin #   Signal Name  
---------------------
   1    `VCC`        
   2    `PWM 0`      
   3    `PWM 1`      
   4    `PWM 2`      
   5    `PWM 3`      
   6    `PWM 4`      
   7    `PWM 5`      
   8    `Freq-In 0`  
   9    `Freq-In 1`  
   10   `GND`        
---------------------

`VCC` (Pin 1):: This is the +5V power supply for the external add-on
boards. The supply has a total current limit of 200mA when powered
through USB.

`PWM` (Pin 2 - 7):: These are PWM output signals. The PWM signal
when active produces a stream of pulses whose width can be controlled
through software. An important parameter of a PWM signal is the *duty
cycle*. The duty cycle is defined as the ratio between the pulse
duration and pulse period of a rectangular waveform.
+
The PWM signal can be used to control the power delivered to a load,
by controlling the duty cycle of the PWM signal. PWM signals are
generally used for Motor speed control, LED brightness control, power
supplies and wave form generation.
+
The PWM signal is a 5V CMOS/TTL output. 

`Freq-In` (Pin 8, 9):: These are input signals, used for event
counting and frequency measurement. These signals are 5V tolerant
CMOS/TTL inputs.

`AIO` Pinmap
~~~~~~~~~~~~

The `AIO` header is terminated with 6 ADC channels, 1 DAC and power
supply. Sensors can be connected to this header.

image::frc10.png["AIO",width=360]

.`AIO` Header
`-------`------------
Pin #   Signal Name  
---------------------
   1    `VCC`        
   2    `ADC 0`      
   3    `ADC 1`      
   4    `ADC 2`      
   5    `ADC 3`      
   6    `ADC 4`      
   7    `ADC 5`      
   8    `DAC 0`      
   9    `VREF-OUT`   
   10   `GND`        
---------------------

`VCC` (Pin 1):: This is the +5V power supply for the external add-on
boards. The supply has a total current limit of 200mA when powered
through USB.

`ADC` (Pin 2-5):: These are analog input signals connected to a 10-bit
Analog-to-Digital Converter. The maximum analog input voltage is
3.0V. 

`DAC` (Pin 8):: This is analog output signal connected to a 10-bit
Digital-to-Analog Converter. The voltage level can vary from 0V to 5V.

`VREF-OUT` (Pin 9):: This is the ADC's reference voltage.

`GND` (Pin 10):: This is the ground signal. All other signals are
referenced to this signal.

ZIO Control Panel
-----------------

The ZIO Control Panel is a GUI application that allows most features
of ZIO to be tested without writing code.

When the control panel is started, the application prompts for the
serial device name of the ZIO motherboard, as show in
<<cpanel-1>>. Select the serial device and click on `OK`. The control
panel window as shown in <<cpanel-2>> is displayed. The control panel
has multiple sub-panels, one for each module.

[[cpanel-1]]
.Serial Device Input
image::cpanel-1.png["Serial Device Input",width=216]

[[cpanel-2]]
.Control Panel Screenshot
image::cpanel-2.png["Control Panel",width=462]

.Controlling GPIO Outputs
The GPIO outputs can be controlled by toggling the check box on the
`GPIO Out` panel.

.Reading GPIO Inputs
The GPIO inputs can be read by inspecting the check box on the `GPIO
In` panel.

.Reading Sensor Inputs
The Sensor inputs can be read by inspecting the progress bar on the
`Sensor` panel.

.Controlling PWM Outputs
PWM signals can generated using the controls in the `PWM` panel,

  . Select the PWM channels, by toggling the checkboxes.
  . Set the PWM frequency, in the frequency slider.
  . Set the PWM duty cycle, in the duty cycle slider.
  . Click `Start` to start generating PWM signal.
  . Click `Stop` to stop generating PWM signal.

.Controlling I2C Devices
I2C devices can be accessed using the controls in `I2C` panel. To list
devices present on the bus,

  . Click on the `Scan` button.
  . Addresses of devices present on the bus is displayed on the list
    box.

To write to a device,

  . Select the device address.
  . Enter the data bytes to be written in hex, separated by commas, in
    the `Write` text box.
  . Click on the `Write` button.

To read from a device,
   
  . Select the device address.
  . Select the no. of bytes to read.
  . Click on the `Read` button.

.Controlling SPI Devices
SPI devices can be accessed using the controls in `SPI` panel.

To configure the device,

  . Specify the GPIO output that is to be used as chip select, in the
    `Chip Select` combo box.
  . If the chip select is active high, select the `CS is Active High`
    check box.
  . Specify the clock polarity in the `Clk Polarity` combo box.
  . Specify the clock phase in the `Clk Phase` combo box.
  . Specify the endianess in the `Endianess` combo box.
  . Click on `Config.` to select the configuration specified. The has
    to be done every time the configuration is changed.

To write and read from the device.

  . Specify the list of bytes to be written in the `Write` text box.
  . Click on `Write & Read` to write the specified byte and read an
    equal no. of bytes.

.Equivalent Code 

The equivalent code for the currently performed operation is indicated
in the Java and Python tabs. This is an easy way to learn the Java and
Python API.

Software Installation
---------------------

Under GNU/Linux
~~~~~~~~~~~~~~~

Supported distributions are:

  1. Debian 6 (Squeeze) and above
  2. Ubuntu 10.10 (Maverick Meerkat) and above
  4. Fedora 14 and above

TIP: In the following sections, commands that have a `#` (hash)
prompt, should be executed as `root`. In case of Ubuntu, the command
should be invoked using `sudo`.

ZIO Driver
^^^^^^^^^^

The ZIO motherboard is accessed through a USB serial interface. The
CDC ACM can be used with the ZIO motherboard. The device file is
generally named `/dev/ttyUSBx` or `/dev/ttyACMx`. The device file
generally belongs to the `dialout` group. Users who would like to
access the device should be a member of the `dialout` group. The user
`xyz` can be added to the `dialout` group using the following command.
 
------
# usermod -a -G	dialout xyz
------

Java API
^^^^^^^^

.Step 1
Make sure the JDK is installed. If not, install it using the following
command
 
------
# apt-get install openjdk-6-jdk		# Under Ubuntu/Mint/Debian
# yum install java-1.6.0-openjdk-devel	# Under Fedora
------
 
.Step 2
Install the serial library package `librxtx-java` using the following
command
 
------
# apt-get install librxtx-java		# Under Ubuntu/Mint/Debian
# yum install rxtx			# Under Fedora
------
 
.Step 3
The ZIO Java API is available on the ZIO Software CD-ROM. Copy it to a
convenient location. Java JAR files are generally located in
`/usr/share/java`.

------
$ cd /media/cdrom/software
# cp zio-java-api-1.2.jar /usr/share/java
------

.Step 4
The `CLASSPATH` environment variable should point to the serial
library and the ZIO API. A possible command sequence is shown
below. This can be added to your `.bashrc` file.

-----
$ export CLASSPATH=.
$ export CLASSPATH=$CLASSPATH:/usr/share/java/RXTXcomm.jar
$ export CLASSPATH=$CLASSPATH:/usr/share/java/zio-java-api-1.2.jar
------

.Step 4
Test your installation using the Java program available on the CD-ROM
at `software/TestZio.class`. The JAR file is executable. When executed,
it will prompt for the serial device file and will then test access to
the board through the Java API.

------
$ cd /media/cdrom/software
$ java TestZio.class
------

image::linux-java-test.png[width=432]

The device file name can be obtained using the `dmesg` command.

Python API
^^^^^^^^^^

.Step 1
Make sure you have Python 2.x installed. If not install it using the
following command
 
------
# apt-get install python		# Under Ubuntu/Mint/Debian
# yum install python-devel		# Under Fedora
------
 
.Step 2
Install the serial library package `python-serial`, using the
following command
 
------
# apt-get install python-serial		# Under Ubuntu/Mint/Debian
# yum install pyserial			# Under Fedora
------
 
.Step 3
The ZIO Python API is available on the ZIO Software CD-ROM. Install
the ZIO Python API using the following command sequence.
 
------
$ cd /media/cdrom/software
$ cp zio-python-api-1.2.tar.gz ~/
$ cd ~/
$ tar --gunzip -x -f zio-api-1.2.tar.gz
$ cd zio-python-api-1.2
# python setup.py install
------

.Step 4
Test your installation using the Python program available on the
CD-ROM at `software/test-zio.py`. When executed, the program will
prompt for the serial device file and will test access to the board
through the Python API.

------
$ cd /media/cdrom/software
$ python test-zio.py
Enter Serial Port: /dev/ttyUSB0
Serial No.: C3712D140000
Firmware Version: 1
Protocol Version: 1
------

ZIO Control Panel
^^^^^^^^^^^^^^^^^

.Step 1
Install the Python API using the command sequence specified in the
previous section.

.Step 2
Install the GTK libraries using the following command.
 
------
# apt-get install python-gtk2		# Under Ubuntu/Mint/Debian
# apt-get install python-dbus		# Under Ubuntu/Mint/Debian
# yum install pygtk2-libglade		# Under Fedora
# yum install dbus-python		# Under Fedora
------
 
.Step 3
The ZIO Control Panel is available in `software/zio-cpanel-1.2.tar.gz`
Install the ZIO control panel using the following command sequence.
 
------
$ cd /media/cdrom/software
$ cp software/zio-cpanel-1.2.tar.gz ~/
$ cd ~/
$ tar --gunzip -x -f zio-cpanel-1.2.tar.gz
$ cd zio-cpanel-1.2
# python setup.py install
------

Under Windows
~~~~~~~~~~~~~

ZIO Driver
^^^^^^^^^^

.Step 1
Insert the ZIO Software CD-ROM into the CD drive.

.Step 2
Connect the ZIO Motherboard to the PC. Windows will detect the device.

image::zio-drv-1.png[width=288]

.Step 3
In the "Found New Hardware Wizard", select "Install from a list of
specific location", and click on "Next".
 
image::zio-drv-2.png[width=288]
 
.Step 4
In the next wizard page, select the "Search removable media" checkbox.
 
image::zio-drv-3.png[width=288]
 
.Step 5
Windows searches for the driver, and indicates that driver has not
passed Windows Logo testing. Select "Continue Anyway" to install the
driver.
 
image::zio-drv-4.png[width=288]

Java API
^^^^^^^^

.Step 1

Make sure the JDK > 1.5 is installed. If not, install the JDK from the
ZIO Software CD-ROM. The setup program is located at
`software/jdk-6u18-windows-i586.exe`.

.Step 2

Install the serial library package. The setup program is located at
`software/rxtx-serial-2.1-7r2.exe`.
 
.Step 3

Install the ZIO Java API. The setup program is located at
`software/zio-java-api-1.2.win32.exe`.

.Step 4
Test your installation using the Java program available on the CD-ROM
at `software/test-zio.jar`. The JAR file is executable. When executed
(double-clicked), it will prompt for the COM port and will then test
access to the board through the Java API.

image::java-test.png[width=432]

The COM port corresponding to ZIO can be obtained from the Device
Manager. Goto "Control Panel > System and Maintenance > Device
Manager". Under "Ports" look for "ZIO Motherboard". The COM port is
specified within parenthesis.

image::vista-8.png[width=432]

Python API
^^^^^^^^^^

.Step 1
Make sure Python 2.x is installed. If not install the setup file
`software/python-2.6.4.msi` provided on the ZIO Software CD-ROM.

.Step 2
Install the serial library using the setup file
`software/pyserial-2.5-rc2.win32.exe` provided on the ZIO Software
CD-ROM.

.Step 3
Install the ZIO Python API using the setup file
`software/zio-python-api-1.2.win32.exe` provided on the ZIO Software
CD-ROM.

.Step 4
Test your installation using the Python program available on the
CD-ROM at `software/test-zio.py`. When executed (double-clicked), the
program will prompt for the serial COM port and will test access to
the board through the Python API.

image::python-test.png[width=432]

The COM port corresponding to ZIO can be obtained from the Device
Manager. Goto "Control Panel > System and Maintenance > Device
Manager". Under "Ports" look for "ZIO Motherboard". The COM port is
specified within parenthesis.

image::vista-8.png[width=432]

ZIO Control Panel
^^^^^^^^^^^^^^^^^

.Step 1
Install the GTK+ library using the setup file
`software/pygtk-all-in-one-2.24.0.win32-py2.6.msi` provided on the ZIO
Software CD-ROM.

.Step 2
Install the ZIO Control Panel using the setup file
`software/zio-cpanel-1.2.win32.exe` provided on the ZIO Software
CD-ROM.

.Step 3
Test the ZIO Control Panel using the shortcut on the Desktop.

Legal Information
-----------------

Copying
~~~~~~~

This work is licensed under the Creative Commons Attribution-Share
Alike 2.5 India License. To view a copy of this license, visit
http://creativecommons.org/licenses/by-sa/2.5/in/ or send a letter to
Creative Commons, 171 Second Street, Suite 300, San Francisco,
California, 94105, USA.

Disclaimers
~~~~~~~~~~~

.NO WARRANTY

ZILOGIC SYSTEMS' DEVELOPMENT KITS (AND TECHNICAL SUPPORT, IF ANY) ARE
PROVIDED "AS IS" AND WITHOUT ANY WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED. TO THE MAXIMUM EXTENT PERMITTED UNDER APPLICABLE LAWS,
ZILOGIC SYSTEMS EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
NONINFRINGEMENT. ZILOGIC SYSTEMS DOES NOT WARRANT THAT THE FUNCTIONS
CONTAINED IN ZILOGIC SYSTEMS' DEVELOPMENT KITS WILL MEET YOUR
REQUIREMENTS, OR THAT THE OPERATION WILL BE UNINTERRUPTED OR
ERROR-FREE, OR THAT DEFECTS IN ZILOGIC SYSTEMS' DEVELOPMENT KITS WILL
BE CORRECTED. FURTHERMORE, ZILOGIC SYSTEMS DOES NOT WARRANT OR MAKE
ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF THE
ZILOGIC SYSTEMS' DEVELOPMENT KITS IN TERMS OF THEIR CORRECTNESS,
ACCURACY, RELIABILITY, OR OTHERWISE. SOME JURISDICTIONS DO NOT ALLOW
THE EXCLUSION OF IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT
APPLY OR MAY BE LIMITED.

.Limitation of Liability

Zilogic Systems' development kits are not designed, authorized or
warranted to be suitable for use in medical, military, aircraft, space
or life support equipment, not in applications where failure or
malfunction of a Zilogic Systems product can resonably be expected to
result in personal injury, death or severe property or environmental
damage. Zilogic Systems accepts no liability for inclusion and/or use
of Zilogic Systems' development kits in such equipment or applications
and therefore such inclusion and/or use is at the customer's own risk.
