ZIO Python API
==============
Zilogic Systems
:Subtitle: Tutorial
:Date:     13 March 2009
:Revision: 1.0

Introduction
------------

ZIO is a IO framework for rapid product development. And as such it
comes along with an API that can be used to access the IO interfaces
provided by the board. This document shows how to use the API, to do
simple tasks, which can then be used a reference for building complex
applications.

From the API point of view the ZIO motherboard has 5 modules.

  1. GPIO
  2. I2C
  3. Sensor
  4. PWM
  5. SPI

These modules on the motherboard are accessed through an agent
software running on the motherboard. The agent software communicates
with the PC and performs appropriate actions on the modules.

Controlling LEDs
----------------

LEDs can be easily connected to GPIO output pins as shown in the
following circuit. The corresponing Python code to blink the LED is
listed below.

.LED Circuit
image::led.png["LED",width=288]

.LED Blink, Python Code
------
import zio <1>
import time

agent = zio.Agent("/dev/ttyUSB0") <2>
gpio = zio.GPIO(agent) <3>
led_pin = 0 <4>

while True:
    # Turn on the LED
    gpio.write_output_pin(led_pin, 1) <5>
    time.sleep(1)

    # Turn off the LED
    gpio.write_output_pin(led_pin, 0) <5>
    time.sleep(1)      
------

<1> The ZIO API resides in a Python module called `zio`. To use the
API the module has to be imported.

<2> The `Agent` class is used to establish a communication link
between the host and the board. The device file that corresponds to
the USB serial port of the ZIO board is passed as argument. Under Linux,
it is usually `/dev/ttyUSBx`. Under Windows, it is `COMx`.

<3> The `GPIO` class is used to control the GPIO module. The `Agent`
object is passed as argument to the constructor.

<4> The `GPIO` ouput pin to which the LED is connected.

<5> The pin state can be controlled using the `write_output_pin`
method of the `GPIO` class. The first argument is the pin to
control. The second argument is the value to be set on the pin.

Interfacing Switches
--------------------

LEDs can be easily connected to GPIO output pins as shown in the
following circuit. When the switch is not pressed, the input pin reads
high, and when switch is pressed, the input pin reads low. The
corresponing Python code to read the switch status is listed below.

image::switch.png["Switch",width=288]

.Switch Status, Python Code
------
import zio
import time

agent = zio.Agent("/dev/ttyUSB0")
gpio = zio.GPIO(agent)
switch_pin = 0 <1>

while True:
    state = gpio.read_input_pin(switch_pin) <2>
    if state:
        print "Switch Off"
    else:
	print "Switch On"

    time.sleep(0.5)
------

<1> The GPIO input pin to which the switch is connected.

<2> The `read_input_pin` method of the `GPIO` class can be used to
read the pin state. The pin no. is passed as argument. The method
returns the state of the pin.

The problem with the above approach is that the state of the pin has
to be periodically polled. If done at high rates this can cause
excessive load on the host CPU. This can be avoided by using a
callback mechanism. A function is registered with the GPIO
module. Whenever a change occurs in any of the pins, the callback is
invoked by the `GPIO` class.

.Switch Status with Notifications, Python Code
------
import zio

def input_changed(event): <1>
    global switch_pin

    if event.pin != switch_pin: <2>
        return
    if event.value:
        print "Switch Off"
    else:
        print "Switch On"

agent = zio.Agent("/dev/ttyUSB0")
gpio = zio.GPIO(agent)
switch_pin = 0

gpio.add_change_handler(input_changed) <3>

agent.wait_for_events() <4>
------

<1> The callback function takes an event object as argument. In the
case of GPIO, it is a `GPIOChangeEvent` object. The event object
contains information about the event -- the pin which the change
occured, the current state of the pin, etc.

<2> The callback will be called when any of the input pins
change. This check filters out changes in other pins.

<3> The callback is registered with the `GPIO` object using the
`add_change_handler` method. The function is passed as an argument to
the method.

<4> The `wait_for_events` method on the `Agent` object is used to wait
for events in an infinite loop. And when an event occurs, the
corresponding callback is invoked.

Interfacing I2C Devices
-----------------------

I2C devices like the I2C IO Expander can be interfaced to the I2C port
as show in the following circuit. The Python code to access the I2C IO
Expander is given below.

.I2C IO Expander Circuit
image::io-expander.png["IO Expander",width=288]

.I2C IO Expander, Python Code
------
import zio

agent = zio.Agent("/dev/ttyUSB0")
i2c = zio.I2C(agent) <1>
dev = 0x20 <2>

i2c.config(100) <3>
i2c.write(dev, [0xFF]) <4>
data = i2c.read(dev, 1) <5>
------

<1> The `I2C` class is used to control I2C module. The `Agent` object
is passed as argument to the constructor.

<2> The 7-bit device address of the I2C device can be obtained from
the data sheet, and the hardware configuration of the pins `A0`, `A1`
and `A2`. In this case it happens to be `0x20`.

<3> The `config` method of the `I2C` class is used to configure the
bus clock frequency. The frequency should be specified in kHz.

<4> The `write` method of the `I2C` class is used to write bytes to
the I2C device. The device address is specified as the first
argument. The list bytes to be written is specified as the second
argument.

<5> The `read` method of the `I2C` class is used to read bytes from
the I2C device. Th device address is specified as the first
argument. The no. of bytes to be read is specified as the second
argument. The method returns a list of bytes read from the device.

Interfacing a Potentiometer
---------------------------

Analog signals from a sensor can be connected to the Sensor port. The
potentiometer can be used as a simple angle sensor. The potentiometer
can be interfaced to the Sensor port as shown in the following
circuit. The Python code to read the analog value from the sensor
signal is given below.

.Potentiometer Circuit
image::pot.png["Potentiometer",width=288]

.Potentionmeter, Python Code
------
import zio
import time

agent = zio.Agent("/dev/ttyUSB0")
sensor = zio.Sensor(agent) <1>
pot_pin = 0 <2>

while True:
    value = sensor.read_pin(pot_pin) <3>
    print "Sensor Value:", value

    time.sleep(0.5)
------

<1> The `Sensor` class is used to control Sensor module. As with other
module objects, the `Agent` object is passed as argument to the
constructor.

<2> The Sensor input pin to which the pot. is connected.

<3> The `read_pin` method of the `Sensor` class can be used to get the
voltage at the pin. The pin no. is passed as argument to the
method. The function returns the voltage on the pin as a floating
point value. In case the raw ADC value is required, `read_pin_raw`
method can be used. The method returns a value between `0x0000` and
`0xFFFF`. 

Note: Eventhough the ADC is 10-bit, the value is oversampled to
16-bits, to make the interface future proof.

Controlling LED Brightness
--------------------------

The brightness of an LED can be controlled by driving the LED using a
PWM signal. The LED can be interfaced to the PWM port as shown in the
following circuit. The Python code to control the LED brightness is
given below.

.LED Brightness Circuit
image::led-brightness.png["LED Brightness",width=288]

.LED Brightness Control, Python Code
------
import zio
import time

agent = zio.Agent("/dev/ttyUSB0")
pwm = zio.PWM(agent) <1>
pins = [0] <2>

pwm.set_freq(pins, 2) <3>
pwm.set_duty(pins, 0) <4>
pwm.start(pins) <5>

while (1):
    for i in range(0, 100, 3):
        pwm.set_duty(pins, i)
        time.sleep(0.01)
------

<1> The `PWM` class is used to control PWM module. As with other
module objects, the `Agent` object is passed as argument to the
constructor.

<2> The PWM output pin to which the LED is connected. The PWM API
accepts a list of pins, so that the PWM parameters of multiple pins
can be set simultaneously.

<3> The PWM freq is set using the `set_freq` method of the `PWM`
class. The list of pins is passed as the first argument. The frequency
in kHz is passed as the second argument.

<4> The PWM duty is set using the `set_duty` method of the `PWM`
class. The list of pins is passed as the first argument. The duty
cycle in percentage is passed as the second argument.

<5> The PWM signal generation is started using the `start` method. And
can be stopped using the `stop` method.

Interfacing SPI Devices
-----------------------

SPI devices like the SPI EEPROM (93C46) can be interfaced to the SPI
port as show in the following circuit. The Python code to access the
SPI EEPROM is given below.

.SPI EEPROM Circuit
image::spi-eeprom.png["SPI EEPROM Circuit",width=288]

.SPI EEPROM, Python Code
------
import zio

agent = zio.Agent("/dev/ttyUSB0")
spi = zio.SPI(agent) <1>
gpio = zio.GPIO(agent) <2>
ss_pin = 4

freq = spi.config(100,
                  zio.SPI.CPOL_IDLE_LOW,
                  zio.SPI.CPHASE_LEAD_EDGE,
                  zio.SPI.ENDIAN_MSB_FIRST) <3>

gpio.write_output_pin(ss_pin, 1) <4>

addr = 0x2
read = spi.write_read([ 0x03, addr, 0x00, 0x00 ]) <5>

gpio.write_output_pin(ss_pin, 0) <4>

print "Read: %02X%02X" % (read[2], read[3])
------

<1> The `SPI` class is used to control SPI module. The `Agent` object
is passed as argument to the constructor.

<2> The `GPIO` class is used for controlling the slave select pin. The
slave select pins available on the SPI port are GPIOs output pins 4
and 5.

<3> The `config` method of the `SPI` class is used to configure the
bus clock frequency, the clock polarity, the clock phase, and the
data endianess.

<4> The slave select signal is made high while accessing the chip,
using the GPIO `write_output_pin` method.

<5> The `write_read` method of the `SPI` class is used to write / read
bytes to / from the slave. The bytes to be written is specified as
argument. An equal no. of bytes is returned as a list. Here a 16-bit
value is read from address `0x2`.
