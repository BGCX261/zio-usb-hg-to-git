ZIO Python API
==============
Zilogic Systems
:Subtitle: Tutorial
:Date:     May 2009
:Revision: 1.1

Introduction
------------

include::intro.txt[]

API Examples
------------

Controlling LEDs
~~~~~~~~~~~~~~~~

include::led-intro.txt[]

.LED Circuit
image::led.png["LED",width=432]

.LED Blink, Python Code
-------
include::code/python/led.py.strip[]
-------

<1> The ZIO API resides in a Python module called `zio`. To use the
API the module has to be imported.

<2> The `Agent` class is used to establish a communication link
between the host and the board. The device file that corresponds to
the USB serial port of the ZIO board is passed as argument. Under
Linux, it is usually `/dev/ttyUSBx` or `/dev/ttyACMx`. Under Windows,
it is `COMx`.

<3> The `GPIO` class is used to control the GPIO module. The `Agent`
object is passed as argument to the constructor.

<4> The `GPIO` output pin to which the LED is connected.

<5> The pin state can be controlled using the `write_pin`
method of the `GPIO` class. The first argument is the pin to
control. The second argument is the value to be set on the pin.

Interfacing Switches
~~~~~~~~~~~~~~~~~~~~

include::switch-intro.txt[]

image::switch.png["Switch",width=432]

.Switch Status, Python Code
------
include::code/python/switch.py.strip[]
------

<1> The GPIO input pin to which the switch is connected.

<2> The `read_pin` method of the `GPIO` class can be used to
read the pin state. The pin no. is passed as argument. The method
returns the state of the pin.

Interfacing I2C Devices
~~~~~~~~~~~~~~~~~~~~~~~

include::i2c-intro.txt[]

.I2C IO Expander Circuit
image::io-expander.png["IO Expander",width=432]

.I2C IO Expander, Python Code
------
include::code/python/i2c-expander.py.strip[]
------

<1> The `I2C` class is used to control I2C module. The `Agent` object
is passed as argument to the constructor.

<2> The 7-bit device address of the I2C device can be obtained from
the data sheet, and the hardware configuration of the pins `A0`, `A1`
and `A2`. In this case it happens to be `0x20`.

<3> The `config` method of the `I2C` class is used to configure the
bus clock frequency. The frequency is specified in kHz.

<4> The `write` method of the `I2C` class is used to write bytes to
the I2C device. The device address is specified as the first
argument. The list of bytes to be written is specified as the second
argument.

<5> The `read` method of the `I2C` class is used to read bytes from
the I2C device. Th device address is specified as the first
argument. The no. of bytes to be read is specified as the second
argument. The method returns a list of bytes read from the device.

Interfacing a Potentiometer
~~~~~~~~~~~~~~~~~~~~~~~~~~~

include::pot-intro.txt[]

.Potentiometer Circuit
image::pot.png["Potentiometer",width=432]

.Potentiometer, Python Code
------
include::code/python/pot.py.strip[]
------

<1> The `ADC` class is used to control ADC module. As with other
module objects, the `ADC` object is passed as argument to the
constructor.

<2> The Sensor input pin to which the pot. is connected.

<3> The `read_pin` method of the `ADC` class can be used to get the
voltage at the pin. The pin no. is passed as argument to the
method. The function returns the voltage on the pin as a floating
point value. In case the raw ADC value is required, `read_pin_raw`
method can be used. The method returns a value between `0x0000` and
`0xFFFF`.

Note: Even though the ADC is 10-bit, the value is oversampled to
16-bits, to make the interface future proof.

Controlling LED Brightness
~~~~~~~~~~~~~~~~~~~~~~~~~~

include::brightness-intro.txt[]

.LED Brightness Circuit
image::led-brightness.png["LED Brightness",width=432]

.LED Brightness Control, Python Code
------
include::code/python/brightness.py.strip[]
------

<1> The `PWM` class is used to control PWM module. As with other
module objects, the `Agent` object is passed as argument to the
constructor.

<2> The PWM output pin to which the LED is connected. The PWM API
accepts a list of pins, so that the PWM parameters of multiple pins
can be set simultaneously.

<3> The PWM freq is set using the `set_freq` method of the `PWM`
class. The list of pins is passed as the first argument. The frequency
in kHz is passed as the second argument.

<4> The PWM duty is set using the `set_duty` method of the `PWM`
class. The list of pins is passed as the first argument. The duty
cycle in percentage is passed as the second argument.

<5> The PWM signal generation is started using the `start` method. And
can be stopped using the `stop` method.

Interfacing SPI Devices
~~~~~~~~~~~~~~~~~~~~~~~

include::spi-intro.txt[]

.SPI EEPROM Circuit
image::spi-eeprom.png["SPI EEPROM Circuit",width=432]

.SPI EEPROM, Python Code
------
include::code/python/spi-eeprom.py.strip[]
------

<1> The `SPI` class is used to control SPI module. The `Agent` object
is passed as argument to the constructor.

<2> The `GPIO` class is used for controlling the slave select pin. The
slave select pins available on the SPI port are GPIO output pins 4
and 5.

<3> The `config` method of the `SPI` class is used to configure the
bus clock frequency, the clock polarity, the clock phase, and the
data endianess.

<4> The slave select signal is made high while accessing the chip,
using the GPIO `write_pin` method.

<5> The `write_read` method of the `SPI` class is used to write / read
bytes to / from the slave. The bytes to be written is specified as
argument. An equal no. of bytes is returned as a list. Here a 16-bit
value is read from address `0x2`.
